[{"path":"index.html","id":"course-syllabus","chapter":"Course syllabus","heading":"Course syllabus","text":"main goal course give tools ease (high-performing effcient) code development . performance side come second part, initial tools introduced also useful situations require\nimportant computation times.focus presentation development tools focuusing notion package. already familiar notion, already\nalready installed packages CRAN example ! also know standard way  distribuute code make available.\nshow package also excellent tool developing code.follow outline :Build packageBuild packageTracking changes, sharing code, collaborative development automating tests packageTracking changes, sharing code, collaborative development automating tests packageMeasure computation timeMeasure computation timeProfile codeProfile codeUse Rcpp optimize needs optimizedUse Rcpp optimize needs optimizedParallelize code easilyParallelize code easilyTo take course, need following softwares installed:latest version  (https://cloud.r-project.org/)latest version  (https://cloud.r-project.org/)latest version RStudio (https://posit.co/download/rstudio-desktop/#download)latest version RStudio (https://posit.co/download/rstudio-desktop/#download)C++ compiler (gcc clang - native UNIX systems,\nWindows users recommend installing\nRtools, \nMac users may necessary install macOS tool chain — namely Xcode Command Line Tools gfortran — used  detailed here1a C++ compiler (gcc clang - native UNIX systems,\nWindows users recommend installing\nRtools, \nMac users may necessary install macOS tool chain — namely Xcode Command Line Tools gfortran — used  detailed here1the following  packages: devtools, future.apply, itertools, microbenchmark, mvtnorm, profvis, Rcpp, RcppArmadillo, roxygen2, testthat, usethisthe following  packages: devtools, future.apply, itertools, microbenchmark, mvtnorm, profvis, Rcpp, RcppArmadillo, roxygen2, testthat, usethisthe software gitthe software git","code":""},{"path":"building-a-package.html","id":"building-a-package","chapter":"1 Building a  package","heading":"1 Building a  package","text":"present efficiently create build package using RStudio IDE, devtools usethis packages.details provided reference material subject: book R packages Hadley Wickham, freely available online.","code":""},{"path":"building-a-package.html","id":"initializing-a-package","chapter":"1 Building a  package","heading":"1.1 Initializing a package","text":"simple way, built RStudio, initialize package follow steps:👉 turn (already)!create new project (top left File drop menu RStudio)create new project (top left File drop menu RStudio)choose “New Directory”choose “New Directory”choose “R package using devtools” (available, choose “R package”, difference “R package” delete unnecessary files automatically created useful)choose “R package using devtools” (available, choose “R package”, difference “R package” delete unnecessary files automatically created useful)give name package, example mypkgr.give name package, example mypkgr., get minimal structure  package, namely:DESCRIPTION file whose Title, Version, Authors@R \nDescription edited (parts can edited even added automatically, see\neven added automatically, see )DESCRIPTION file whose Title, Version, Authors@R \nDescription edited (parts can edited even added automatically, see\neven added automatically, see )NAMESPACE file later edited automatically\n(hands now)NAMESPACE file later edited automatically\n(hands now)folder R add .R script filesa folder R add .R script filesdevtools also adds three optional files:.gitignore, relative git, version control tool see detail section GitHub.gitignore, relative git, version control tool see detail section GitHubmypkgr.Rproj specific file RStudio, allows define characteristics preferences project just createdmypkgr.Rproj specific file RStudio, allows define characteristics preferences project just created.Rbuildignore allows ignore files build package road (example, mypkgr.Rproj file included package).Rbuildignore allows ignore files build package road (example, mypkgr.Rproj file included package)","code":""},{"path":"building-a-package.html","id":"adding-a-function-common-theme-example","chapter":"1 Building a  package","heading":"1.2 Adding a function: common theme example","text":"first invite code following function, use throughout course:want compute value density multivariate normal distribution \\(\\mathbb{R}^p\\) \\(n\\) points. function must applicable multivariate normal distribution (.e. mean vector \\(\\mathbb{R}^p\\) variance-covariance matrix order \\(p\\)), wish compute values density evaluated \\(n\\) points single call function.need create function mvnpdf() file named mvnpdf.R\n folder package, :takes arguments:\nx matrix, \\(n\\) columns (observations) \\(p\\) rows\nmean vector means\nvarcovM variance-covariance matrix\nLog logical parameter, default value TRUE.\ntakes arguments:x matrix, \\(n\\) columns (observations) \\(p\\) rowsx matrix, \\(n\\) columns (observations) \\(p\\) rowsmean vector meansmean vector meansvarcovM variance-covariance matrixvarcovM variance-covariance matrixLog logical parameter, default value TRUE.Log logical parameter, default value TRUE.returns list containing matrix x, vector length \\(n\\) multivariate normal distribution density values points.returns list containing matrix x, vector length \\(n\\) multivariate normal distribution density values points.👉 turn !function proposal can download\n. ⚠️ WARNING ! click quickly link, invalidate participation class !advice writing code, see \nR code section Hadley Wickam R packages online book.","code":""},{"path":"building-a-package.html","id":"documenting-a-function","chapter":"1 Building a  package","heading":"1.3 Documenting a function","text":"important properly document code. Every project least 2\ndevelopers:,,6 months.6 months.sake future self, favor take time document\ncode !strongly advise use roxygen2 package document\npackages. main advantage help function \nfile code defining function.👉 turn!Start inserting skeleton helper “Insert Roxygen\nSkeleton” located “Code” menu Magic Wand sub-menu \nscript window.Start inserting skeleton helper “Insert Roxygen\nSkeleton” located “Code” menu Magic Wand sub-menu \nscript window.Complete documentation filling :\ntitle function (first line)\ndescription function (second paragraph)\nfill third paragraph, part go “Details” section help page\nmeaning parameters\noutput, @return tag\nComplete documentation filling :title function (first line)title function (first line)description function (second paragraph)description function (second paragraph)fill third paragraph, part go “Details” section help pageif fill third paragraph, part go “Details” section help pagethe meaning parametersthe meaning parametersthe output, @return tagthe output, @return tagGenerate documentation using “Document” “” menu “Build” tab (alternatively run devtools::document() use Ctrl+Shift+D). effect command multiple:\nman folder created inside , mvnpdf.Rd file contains help information function\nNAMESPACE file modified\nGenerate documentation using “Document” “” menu “Build” tab (alternatively run devtools::document() use Ctrl+Shift+D). effect command multiple:man folder created inside , mvnpdf.Rd file contains help information functiona man folder created inside , mvnpdf.Rd file contains help information functionthe NAMESPACE file modifiedthe NAMESPACE file modifiedIn case problems curiosity done, can look proposal.details package documentation roxygen2 tags, see Object documentation secttion Hadley Wickam R packages online book.Let’s finish mentioning function usethis package initializes \nhome help page whole package:generated help page accessible, package installed,\nfollowing command:","code":"\nusethis::use_package_doc()\n?mypkgr"},{"path":"building-a-package.html","id":"interactively-test-the-package","chapter":"1 Building a  package","heading":"1.4 Interactively test the package","text":"test package, load R using “Load ” (Ctrl+Shift+L) \n“” menu “Build” tab, alternatively devtools::load_all()).can use package directly R: see\nhelp function ?mvnpdf example execute commands given example section help page.code development, can thus:Add/Modify  codeAdd/Modify  codeRe-load package Ctrl+Shift+LRe-load package Ctrl+Shift+LExperiment consoleExperiment consoleAnd ……","code":"\n?mvndpf"},{"path":"building-a-package.html","id":"automatically-test-your-package","chapter":"1 Building a  package","heading":"1.5 Automatically test your package","text":"initialize automatic testing capabilities package, execute following command:command creates tests folder includes testthat.R file – modified – testthat folder add automated tests. tool based theory unit tests.example, content file call test-univariate.R put testthat folder:second one named test-bivariate.R :execute tests, can click “Test package” (Ctrl+Shift+T) “” menu “Build” tab, run devtools::test()advantage automatic tests run every time check package.good practice add unit test time bug identified fixed,\ncan immediately identify prevent error happening \nfuture.","code":"\nusethis::use_testthat()\ntest_that(\"correct result for univariate gaussian\", {\n  expect_equal(mvnpdf(x=matrix(1.96), Log=FALSE)$y, dnorm(1.96))\n  expect_equal(mvnpdf(x=matrix(c(1.96, -0.5), ncol = 2), Log=FALSE)$y,\n               dnorm(c(1.96, -0.5)))\n})\ntest_that(\"correct results for bivariate gaussian\", {\n  expect_equal(mvnpdf(x=matrix(rep(1.96,2), nrow=2, ncol=1), Log=FALSE)$y,\n               mvtnorm::dmvnorm(rep(1.96, 2)))\n})"},{"path":"building-a-package.html","id":"checking-your-package","chapter":"1 Building a  package","heading":"1.6 Checking your package","text":"Ruunning check means ensuring tthat everything package correct work expected, can installed properly.\n“Passing R CMD CHECK” mandatory successfully uploading package CRAN.perform R CMD CHECK package, can click “Check” (Ctrl+Shift+E) “Build” tab, run devtools::check().check, automated unitt tests developed previously \nexecuted. advantage written tests, don’t need worry , simply react adjust code errors returned flagged.","code":""},{"path":"building-a-package.html","id":"install-your-package","chapter":"1 Building a  package","heading":"1.7 Install your package","text":"moment, package exists environment associated RStudio project created. able use anywhere (computer)  general way, install (like CRAN package example)., click “Install Restart” (Ctrl+Shift+B) “Build” tab, alternatively can run devtools::install().finally, can configure RStudio’s behavior time installation, simultaneously documents package: go “” menu “Build” tab, “Configure Build Tools”. click “Configure” check box bottom “Install Restart”.","code":""},{"path":"building-a-package.html","id":"appendix-1.1-add-an-s3-method","chapter":"1 Building a  package","heading":"1.8 Appendix 1.1: add an S3 method","text":"packages, oftten implement called S3 methods , result object res, one can run print(res), summary(res), plot(res)…example plot() method can add package:⚠️ WARNING !order S3 method want apply \nresult function mvnpdf(), declare mvnpdf() returns result class mvnpdf.Test function, executing example.Don’t forget re-install package (“Install Restart” Ctrl+Shift+B).Look contents man folder changes made NAMESPACE.proposed solution: file\ncontains complete code mvnpdf() function associated plot() method.","code":"\n#' Plot of the mvnpdf function\n#'\n#' @param x an object of class \\code{mvnpdf} resulting from a call of\n#' \\code{mnvpdf()} function.\n#' @param ... graphical parameters passed to \\code{plot()} function.\n#'\n#' @return Nothing is returned, only a plot is given.\n#' @export\n#'\n#' @examples\n#' pdfvalues <- mvnpdf(x=matrix(seq(-3, 3, by = 0.1), nrow = 1), Log=FALSE)\n#' plot(pdfvalues)\nplot.mvnpdf <- function(x, ...) {\n  plot(x$x, x$y, type = \"l\", ...)\n}"},{"path":"building-a-package.html","id":"appendix-1.2-submit-ones-package-on-cran","chapter":"1 Building a  package","heading":"1.9 Appendix 1.2: submit one’s package on CRAN","text":"Run two following commands: devtools::check() followed devtools::submit_cran().\ndetails, see Hadley Wickham’s recommanded pipeline book R packages","code":""},{"path":"version-control-with-git-and-github.html","id":"version-control-with-git-and-github","chapter":"2 Version control with git and GitHub","heading":"2 Version control with git and GitHub","text":"interested solutions offered RStudio GitHub hosting version control projects. allows monitor changes history, help collaborative development facilitate continuous integration.","code":""},{"path":"version-control-with-git-and-github.html","id":"principles-of-version-control","chapter":"2 Version control with git and GitHub","heading":"2.1 Principles of version control","text":"principle version control record successive changes made files (especially .R files case).RStudio offers 2 integrated solutions version control:gitgitsvnsvn","code":""},{"path":"version-control-with-git-and-github.html","id":"git","chapter":"2 Version control with git and GitHub","heading":"2.1.1 git","text":"git version control software (.e. tool record history successive changes code allow share changes people). git command line program, necessarily intuitive use.git works follows: server cloud, updated version code available. time possible access version code online. contributor can download last updated version (action called pull),\nediting locally. changes made locally, \ncontributor can update online version code, changes become available everyone (action called push).NB: git designed lightweight files (text files) far optimized heavy /compressed files (e.g. .RData files).","code":""},{"path":"version-control-with-git-and-github.html","id":"subversion","chapter":"2 Version control with git and GitHub","heading":"2.1.2 subversion","text":"subversion solution available RStudio. works similar way git, less functionalities won’t detail (major difference \ncontributors work simultaneously version code).","code":""},{"path":"version-control-with-git-and-github.html","id":"use-git-locally-within-rstudio","chapter":"2 Version control with git and GitHub","heading":"2.2 Use git locally within RStudio","text":"👉 turn !Start enabling git “Git/SVN” tab “Project Options” located “Tools” menu follow instructions. can also use usethis::use_git().Start enabling git “Git/SVN” tab “Project Options” located “Tools” menu follow instructions. can also use usethis::use_git().“Git” tab now appears next “Build” tab,\nregister current state package making first commit:“Git” tab now appears next “Build” tab,\nregister current state package making first commit:2a. Select files track (select .Rproj file)2a. Select files track (select .Rproj file)2b. write informative message (collaborators – includes future self)2b. write informative message (collaborators – includes future self)2c. click “Commit” >2c. click “Commit” >Add “*.Rproj” line “.gitignore” file make new commitAdd “*.Rproj” line “.gitignore” file make new commitVisualize changes history using visualization tools\n“Diff” “History” tools accessible “Git” tabVisualize changes history using visualization tools\n“Diff” “History” tools accessible “Git” tabArtwork CC-Allison Horst","code":""},{"path":"version-control-with-git-and-github.html","id":"good-commit-practices","chapter":"2 Version control with git and GitHub","heading":"2.2.1 Good commit practices","text":"Ideally, commit solve one problem. fix entirety (complete), contain changes related problem (minimal). especially useful write informative commit messages (kind help collaborators, includes future self). also concise, describe reasons changes rather changes (visible Diff). NB: sometimes difficult follow guidelines letter, merely ideal guide. certainly prevent regularly making commits.hand, temptation “clean” tidy change-history natural, source unnecessary problems. contradicts traceability goal version control. Since code development generally complex, messy, non-linear intellectual process, normal recording changes reflects path. practice, future self first user change history, priority make easier future solving bugs extending functionality.Artwork CC-Allison Horst","code":""},{"path":"version-control-with-git-and-github.html","id":"github","chapter":"2 Version control with git and GitHub","heading":"2.3 GitHub","text":"GitHub website offering online code hosting solution, based git. many alternative websites services (gitlab, bitbucket, …) allowing host code also based git. GitHub popular  community, relatively easy use, even novice user.Advantages using GitHub:simple user-friendly graphical interface track history changes codea simple user-friendly graphical interface track history changes codethe latest development version code available online can reference (can even reference specific commit number freeze specific version code)latest development version code available online can reference (can even reference specific commit number freeze specific version code)users clear transparent channel report bugs/difficultiesusers clear transparent channel report bugs/difficultiesit greatly facilitates collaborative developmentit greatly facilitates collaborative development","code":""},{"path":"version-control-with-git-and-github.html","id":"upload-ones-package-onto-github","chapter":"2 Version control with git and GitHub","heading":"2.3.1 Upload one’s package  onto GitHub","text":"👉 turn !Go https://github.com/ create GitHub account (hesitate, common convention use firstnamelastname username)Go https://github.com/ create GitHub account (hesitate, common convention use firstnamelastname username)Use usethis::use_github() follow instructions.Use usethis::use_github() follow instructions.Add “README.Rmd” file package order nice home page GitHub\npage GitHub:Add “README.Rmd” file package order nice home page GitHub\npage GitHub:3a. RStudio, run command usethis::use_readme_rmd()3a. RStudio, run command usethis::use_readme_rmd()3b. using “Diff” tool “Git” tab RStudio, review changes made previous command3b. using “Diff” tool “Git” tab RStudio, review changes made previous command3c. edit created “README.Rmd” file, create corresponding README.md file running knitr (click wool ball “Knit” top left RStudio), making 3rd commit containing changes3c. edit created “README.Rmd” file, create corresponding README.md file running knitr (click wool ball “Knit” top left RStudio), making 3rd commit containing changes3d. point, visit directory page GitHub, 3rd commit appear moment. synchronize online GitHub directory local folder. , click “Push” “Git” tab. Now, changes 3rd commit visible online GitHub.3d. point, visit directory page GitHub, 3rd commit appear moment. synchronize online GitHub directory local folder. , click “Push” “Git” tab. Now, changes 3rd commit visible online GitHub.","code":""},{"path":"version-control-with-git-and-github.html","id":"collaborative-code-production","chapter":"2 Version control with git and GitHub","heading":"2.4 Collaborative code production","text":"Artwork CC-Allison Horstgit GitHub particularly useful efficient several people collaborate develop code together. Indeed, everyone can pull push successive changes code, simultaneously, endusing always working latest version code. see different concepts useful case collaborative work.👉 turn !pairing-another participant, add new buddy “collaborator” GitHub directory “Settings” tab GitHub.pairing-another participant, add new buddy “collaborator” GitHub directory “Settings” tab GitHub.moments later, added collaborator receives email inviting accept addition (check spam folder). Click link accept.moments later, added collaborator receives email inviting accept addition (check spam folder). Click link accept.RStudio, create new project form git using url buddy’s project.RStudio, create new project form git using url buddy’s project.","code":""},{"path":"version-control-with-git-and-github.html","id":"branches","chapter":"2 Version control with git and GitHub","heading":"2.4.1 Branches","text":"One useful features git branches. allows make important changes changes code without disrupting current operation. particularly useful explore development path don’t know successful end.way, already using branches since beginning part. Indeed, default branch called “master” (sometimes “main”).Thanks system branches, obtain tree different commits time (nodes correspond separation branches).","code":""},{"path":"version-control-with-git-and-github.html","id":"merge","chapter":"2 Version control with git and GitHub","heading":"2.4.2 Merge","text":"-called “pull” can decomposed 2 actions made git:first fetch, corresponds downloading online codefirst fetch, corresponds downloading online codeimmediately followed merge, merges local version downloaded changes.immediately followed merge, merges local version downloaded changes.conducting experimental development one branch one may want merge changes “master” branch example, experiment proved successful.changes concern separate parts code, merging can done without problem. hand, two versions merged contain changes concern lines code since last common commit , encounter one () conflicts, manually resolved.","code":""},{"path":"version-control-with-git-and-github.html","id":"conflicts","chapter":"2 Version control with git and GitHub","heading":"2.4.3 Conflicts","text":"Let’s take following example: developer \\(D_1\\) developer \\(D_2\\) pulled version v0.1 code time \\(t\\) respective machines. work independently make changes code. pushing /changes, developer \\(D_2\\) receives error message:\"Sync Error.Please resolve conflicted files, commit, try syncing .\"Chaque fichier étant source de conflit alors été automatiquement édité comme suit :order solve conflict, manually carefully edit file one one, choosing whether keep local online version code, can commit , finally successfully push changes online.👉 turn !Edit README.Rmd file paired buddy, commit change, finally push .Edit README.Rmd file paired buddy, commit change, finally push .buddy modified README.Rmd modify file line (make sure discussing together), **WITHOUT* pulling buddy’s changes first! Comment try push changes.buddy modified README.Rmd modify file line (make sure discussing together), **WITHOUT* pulling buddy’s changes first! Comment try push changes.Resolve conflict.Resolve conflict.NB: real life want avoid situation always pull pushing, purposedly opposite sake providing example demystifying conflicts.","code":"<<<<<<< HEAD\nlocal code\n=======\nonline code\n>>>>>>> remote"},{"path":"version-control-with-git-and-github.html","id":"fork","chapter":"2 Version control with git and GitHub","heading":"2.4.4 Fork","text":"fork allows create copy available code repository. Thus original code impacted changes. like creating branch, severing tree, can assume ownership . also called “cutting” continue metaphor…action mainly useful pull requests (see next).","code":""},{"path":"version-control-with-git-and-github.html","id":"pull-request","chapter":"2 Version control with git and GitHub","heading":"2.4.5 Pull request","text":"Pull requests easiest way propose changes code project contributor . GitHub provides graphical interface makes easy .👉 turn !Modify README.Rmd neighbor paired-buddy forking package.Modify README.Rmd neighbor paired-buddy forking package.Propose change form pull request GitHub repository webpage (“Pull request”s tab).Propose change form pull request GitHub repository webpage (“Pull request”s tab).Accept neighbor pull request repository GitHub website, merge .Accept neighbor pull request repository GitHub website, merge .","code":""},{"path":"version-control-with-git-and-github.html","id":"issues","chapter":"2 Version control with git and GitHub","heading":"2.4.6 Issues","text":"GitHub repository, can post comment, form issue, alert developers possible bug (providing minimally reproducible example bug), question use package, ask additional feature…Ideally, propose pull request solves issue can (.e. ability time).👉 turn !Use usethis::use_github_links() add following 2 lines package DESCRIPTION file:URL: http://github.com/*username*/mypkgBugReports: http://github.com/*username*/mypkg/issuesUse usethis::use_github_links() add following 2 lines package DESCRIPTION file:URL: http://github.com/*username*/mypkgBugReports: http://github.com/*username*/mypkg/issuesView new changes, commit .View new changes, commit .Create issue paired buddy’s projectCreate issue paired buddy’s project","code":""},{"path":"version-control-with-git-and-github.html","id":"continuous-integration-ci","chapter":"2 Version control with git and GitHub","heading":"2.5 Continuous Integration (CI)","text":"change, commit, possibility introduce 1 () bugs prevent package passing CRAN R CMD CHECK. accumulate many bugs, time submitting new version CRAN many corrections make. even frustrating package passed R CMD CHECK …Continuous integration services allow check test package automatically commit ! case failure, receive email informing . number services offer (limited) free package open-source projects.Another reason use continuous integration allows test package different infrastructures (e.g. Windows, Ubuntu, Mac OS) different versions  (current, devel…)","code":""},{"path":"version-control-with-git-and-github.html","id":"github-actions","chapter":"2 Version control with git and GitHub","heading":"2.5.1 GitHub Actions","text":"GitHub Actions let launch “actions” automatically, every time push GitHub. usethis::use_github_action_check_standard() command allows initialize Github Actions add R CMD CHECK action package.👉 turn !Run command usethis::use_github_action_check_standard(), commit push changes. See happens GitHub webpage “Actions” tab.Run command usethis::use_github_action_check_standard(), commit push changes. See happens GitHub webpage “Actions” tab.Add badge README.Rmd (nott forget knit ) code obtained console commit (push) changes.Add badge README.Rmd (nott forget knit ) code obtained console commit (push) changes.look following webpage informs different GitHub Actions available  packages: https://github.com/r-lib/actions/blob/v1/examples/README.md","code":""},{"path":"version-control-with-git-and-github.html","id":"r-hub","chapter":"2 Version control with git and GitHub","heading":"2.5.2 R-hub","text":"R consortium provides R-hub builder, ambition soon provide continuous integration service especially dedicated  packages.advantage use exact infrastructure CRAN make check package foolproof. can use devtools::check_rhub() fucntion.","code":""},{"path":"version-control-with-git-and-github.html","id":"additional-references","chapter":"2 Version control with git and GitHub","heading":"2.6 Additional References","text":"Happy Git R Jenny Bryan.","code":""},{"path":"version-control-with-git-and-github.html","id":"appendix-2.1-code-coverage","chapter":"2 Version control with git and GitHub","heading":"2.7 Appendix 2.1: Code coverage","text":"covr package proposes solution measure coverage unit tests associated package. test coverage determines proportion source code actually used execution unit tests. Measuring coverage code reinforces reliability code gives confidence potential users.👉 turn !Run command usethis::use_coverage(), add nice badge README.md code got R consoleCommit push changes.information feel free look covr vignette.","code":""},{"path":"measuring-and-comparing-execution-times.html","id":"measuring-and-comparing-execution-times","chapter":"3 Measuring and comparing execution times","heading":"3 Measuring and comparing execution times","text":"first step optimizing code measure execution time, order compare ttimings different implementations.","code":""},{"path":"measuring-and-comparing-execution-times.html","id":"measuring-execution-times-with-system.time","chapter":"3 Measuring and comparing execution times","heading":"3.1 Measuring execution times with system.time()","text":"measure execution time R command, can use native system.time() function like :problem appears example execution fast system.time() displays 0 (close value) impossible marginally compare hopefully faster implementation. Also, see variability run command several times.Thus want compare code mvtnorm::dmvnorm() function, can’t use system.time():say increase complexity calculation, better way: use microbenchmark package !","code":"\nobs <- matrix(rep(1.96, 2), nrow=2, ncol=1)\nsystem.time(mvnpdf(x=obs, Log=FALSE))##    user  system elapsed \n##   0.001   0.000   0.002\nobs <- rep(1.96, 2)\nsystem.time(mvtnorm::dmvnorm(obs))##    user  system elapsed \n##   0.003   0.001   0.012"},{"path":"measuring-and-comparing-execution-times.html","id":"compare-execution-timings-with-microbenchmark.","chapter":"3 Measuring and comparing execution times","heading":"3.2 Compare execution timings with microbenchmark().","text":"name indicates, package allows compare execution timings even quick. Moreover, bencmarked expression repeatedly evaluated certain number times, thus stabilizing timing estimations.mvnpdf() dmnvorm() functions able take matrix input, can also compare timings setting:Something happened… find exactly causing issue comes next.","code":"\nlibrary(microbenchmark)\nmb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),\n                     mvnpdf(x = matrix(rep(1.96,2)), \n                            Log = FALSE),\n                     times = 1000)## Warning in microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)), mvnpdf(x =\n## matrix(rep(1.96, : less accurate nanosecond times to avoid potential integer\n## overflows\nmb## Unit: microseconds\n##                                           expr    min      lq     mean median\n##                 mvtnorm::dmvnorm(rep(1.96, 2)) 19.885 20.7255 21.70134 21.197\n##  mvnpdf(x = matrix(rep(1.96, 2)), Log = FALSE) 18.368 19.1470 21.62496 19.516\n##      uq      max neval\n##  21.935   70.684  1000\n##  20.131 1592.563  1000\nn <- 100\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), \n                            Log=FALSE),\n                     times=100)\nmb## Unit: microseconds\n##                                                       expr     min       lq\n##         mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))  23.124  25.4815\n##  mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 269.370 279.5380\n##       mean   median       uq     max neval\n##   28.74797  27.0395  29.2945  61.500   100\n##  293.55754 289.2345 298.8695 363.178   100"},{"path":"profiling-code.html","id":"profiling-code","chapter":"4 Profiling code","heading":"4 Profiling code","text":"Profiling determining part code take time compute (also memory-wise). found block code takes longest time execute, goal optimize small part code.get profiling code , select lines code interest go “Profile” menu “Profile Selected Lines”. uses package profis, particular profvis() function.OK, OK, get ! Concatenating vector go loop really good idea.","code":"\nn <- 10e4\npdfval <- mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)"},{"path":"profiling-code.html","id":"comparison-with-an-improved-implementtation-of-mnvpdf.","chapter":"4 Profiling code","heading":"4.1 Comparison with an improved implementtation of mnvpdf().","text":"Consider new version mvnpdf(), called mvnpdfsmart(). Download file, include package.Now profile following command:indeed removed main computational bottleneck, can now learn detailed way takes time function.confirm mvnpdfsmart() indeed much faster mvnpdf() can make comparison using microbenchmark():can also check whether mvnpdfsmart becomes competitive dmvnorm():still work done…","code":"\nn <- 10e4\npdfval <- mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)\nn <- 1000\nmb <- microbenchmark(mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), \n                            Log = FALSE),\n                     mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), \n                                 Log = FALSE),\n                     times=100L)\nmb## Unit: milliseconds\n##                                                            expr      min\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3.099436\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2.327037\n##        lq     mean   median       uq      max neval\n##  3.268992 3.680936 3.439039 3.545332 8.327428   100\n##  2.347824 2.458195 2.361293 2.397495 7.069507   100\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   41.820\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3160.280\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2321.666\n##         lq       mean    median       uq      max neval\n##    50.5735   59.13758   56.5185   64.903  102.541   100\n##  3343.5500 3700.23893 3438.9980 3512.757 7886.063   100\n##  2372.8135 2495.90329 2393.9285 2421.890 6601.574   100"},{"path":"profiling-code.html","id":"comparison-with-an-optimized-pure-r-implementation","chapter":"4 Profiling code","heading":"4.2 Comparison with an optimized pure R implementation","text":"several research test trials errors, Boris arrived optimized version using  capabilities.Include mvnpdfoptim() function package, profile :microbenchmark() goes :Finally, can profile tthe dmvnorm() function:","code":"\nlibrary(profvis)\nn <- 10e4\nprofvis(mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE))\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   42.845\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3150.932\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2325.930\n##  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 1747.789\n##        lq       mean    median        uq      max neval\n##    48.134   96.10769   56.3545   62.9555 3886.882   100\n##  3279.939 3478.84754 3397.1370 3477.0460 7062.865   100\n##  2382.223 2555.47998 2397.0855 2424.9655 5824.419   100\n##  1789.240 1922.99840 1806.3985 1855.8855 5375.469   100\nn <- 10e5\nlibrary(mvtnorm)\nprofvis::profvis(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)))"},{"path":"rcpp-or-how-to-easily-embed-c-code-into-a-package.html","id":"rcpp-or-how-to-easily-embed-c-code-into-a-package","chapter":"5 Rcpp or how to easily embed C++ code into a  package","heading":"5 Rcpp or how to easily embed C++ code into a  package","text":"Rcpp (“R-C-Plus-Plus”) package facilitates interface C++ .  interpreted language, feature makes number things easy (including giving us access console can evaluate code variables fly). Nevertheless, ease use counterbalanced larger computation times comapred lower level languages C, Fortran C++ (require compilation).curious reader directed towards online book Rcpp everyone Masaki E. Tsuda, thorough complete resource understanding use Rcpp, complement introduction can found “Rcpp” section Hadley Wickham’s book Advanced R.","code":""},{"path":"rcpp-or-how-to-easily-embed-c-code-into-a-package.html","id":"first-function-in-rcpp","chapter":"5 Rcpp or how to easily embed C++ code into a  package","heading":"5.1 First function in Rcpp","text":"👉 turn !make package ready use Rcpp, start running following command:See changes madeSee changes madeyou also add following 2 roxygen comments general help page \npackage:also add following 2 roxygen comments general help page \npackage:now going create first function Rcpp invert matrix. , use C++ library Armadillo. modern simple linear algebra library, highly optimized, interfaced  via RcppArmadillo package.C++ different language . main differences impact us:C++ efficient loops (including nested loops – ⚠️ often one order faster , due way C++ allocates walks memory).C++ efficient loops (including nested loops – ⚠️ often one order faster , due way C++ allocates walks memory).command must end semicolon ;.command must end semicolon ;.C++ typed language: must declare type variable can use code.C++ typed language: must declare type variable can use code.👉 turn !Create new C++ file RStudio (via File > New File > C++ File menu), save src folder. Take time read try understand line.Create new C++ file RStudio (via File > New File > C++ File menu), save src folder. Take time read try understand line.Compile load package (via “Install Restart” button) try using timesTwo() function console.Compile load package (via “Install Restart” button) try using timesTwo() function console.Install RcppArmadillo 👉 package, don’t forget make necessary additions DESCRIPTION (use usethis::use_rcpp_armadillo())Install RcppArmadillo 👉 package, don’t forget make necessary additions DESCRIPTION (use usethis::use_rcpp_armadillo())Using Hadley Wickham’s introduction Rcpp book Advanced R, well documentation RcppArmadillo package C++ library Armadillo, try write short function invC() C++ computes inverse matrix.Using Hadley Wickham’s introduction Rcpp book Advanced R, well documentation RcppArmadillo package C++ library Armadillo, try write short function invC() C++ computes inverse matrix.successfully compiled invC function accessible , create mvnpdf_invC() function mvnpdfsmart implementation replacing matrix inverse calculations call invC.successfully compiled invC function accessible , create mvnpdf_invC() function mvnpdfsmart implementation replacing matrix inverse calculations call invC.Evaluate performance gain new implementation mvnpdf_invC.Evaluate performance gain new implementation mvnpdf_invC.","code":"\nusethis::use_rcpp()\n#' @useDynLib mypkgr\n#' @importFrom Rcpp sourceCpp, .registration = TRUE\nNULL\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   44.239\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3157.943\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2325.110\n##  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 1748.076\n##  mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2309.612\n##         lq       mean   median       uq       max neval\n##    54.0995   61.69311   59.573   66.912    96.637   100\n##  3324.5055 3546.90385 3417.104 3478.932  6895.708   100\n##  2355.5115 2977.23140 2385.564 2418.283 53883.143   100\n##  1775.3000 1942.26102 1802.463 1824.028  5047.961   100\n##  2341.0180 2457.60314 2360.329 2389.644  5577.681   100\nprofvis::profvis(mvnpdfoptim(x=matrix(1.96, \n    nrow = 2, ncol = 1000), Log=FALSE))\nprofvis::profvis(mvnpdfoptim(x=matrix(1.96, \n    nrow = 100, ncol = 1000), Log=FALSE))"},{"path":"rcpp-or-how-to-easily-embed-c-code-into-a-package.html","id":"optimize-thanks-to-c","chapter":"5 Rcpp or how to easily embed C++ code into a  package","heading":"5.2 Optimize thanks to C++","text":"general rule, much computational time gained replacing optimized  function C++ function. Indeed, base  fuunctions fact already wrappers around well optimized C Fortran routines. gain limited suppression argument checking type management (reason!).👉 turn !mvnpdfsmart, propose complete implementation C++ computating density multivariate Normal distribution mvnpdfsmartC().mvnpdfsmart, propose complete implementation C++ computating density multivariate Normal distribution mvnpdfsmartC().Evaluate performance gain new implementation mvnpdfsmartC.Evaluate performance gain new implementation mvnpdfsmartC.can download proposal mvnpdfsmartC.cpp .(relatively small) additional speed gain (cost code readability!), can look optimized Armadillo C++ implementation mvnpdfoptimC.cpp.Note Rcpp functions can used outside package architecture thanks Rcpp::sourceCpp() function. , seen always desirable manage one’s code inside package, unlikely need !","code":"\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmartC(x=matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2), varcovM = diag(2), Log=FALSE),\n                     mvnpdfoptimC(x=matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2), varcovM = diag(2), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                                                                       expr\n##                                                         mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))\n##                                                  mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                             mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                             mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                             mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##  mvnpdfsmartC(x = matrix(1.96, nrow = 2, ncol = n), mean = rep(0,      2), varcovM = diag(2), Log = FALSE)\n##  mvnpdfoptimC(x = matrix(1.96, nrow = 2, ncol = n), mean = rep(0,      2), varcovM = diag(2), Log = FALSE)\n##       min        lq       mean    median        uq       max neval\n##    43.665   53.0745   64.02642   61.0080   73.0210   106.805   100\n##  3136.541 3274.6495 3540.97320 3363.7425 3494.0610  6841.260   100\n##  2326.668 2353.1335 2448.28753 2374.9660 2441.3040  5854.185   100\n##  1744.468 1784.9145 2122.83486 1822.8190 1877.2260 12670.476   100\n##  2314.327 2339.6035 2447.17971 2360.4110 2403.2355  6041.883   100\n##    51.619   53.9765   58.91085   56.7645   60.4135   112.504   100\n##    35.465   38.5195   43.10658   41.3690   45.1000    81.180   100"},{"path":"rcpp-or-how-to-easily-embed-c-code-into-a-package.html","id":"annexe-5.1-premature-optimization-is-a-bad-idea","chapter":"5 Rcpp or how to easily embed C++ code into a  package","heading":"5.3 Annexe 5.1: premature optimization is a bad idea","text":"Chambers, Software Data Analysis: Programming R, Springer, 2008:Including additional C code serious step, added dangers often substantial amount programming debugging required. good reason.","code":""},{"path":"code-parallelization.html","id":"code-parallelization","chapter":"6  code Parallelization","heading":"6  code Parallelization","text":"","code":""},{"path":"code-parallelization.html","id":"introduction-to-parallel-execution-in","chapter":"6  code Parallelization","heading":"6.1 Introduction to parallel execution in ","text":"Apart optimizing code algorithms, another way get high performing code take advantage parallel architectures modern computers. goal parallelize one’s code order perform simultaneous operations distinct parts problem, using different computing cores. reduce total computation time needed, set operations executed faster, resulting overall user speed-.significant number algorithms -called “embarrassingly parallel”, .e. whose computations can broken several independent sub-computations. statistics, often easy straightforward parallelize according different observations different dimensions. Typically, operations can written form loop whose operations independent one iteration next.necessary operations execute code parallel follows:Start \\(m\\) “worker” processes (.e. computing cores) initialize themStart \\(m\\) “worker” processes (.e. computing cores) initialize themSend necessary functions data task workersSend necessary functions data task workersSplit tasks \\(m\\) operations similar size send workersSplit tasks \\(m\\) operations similar size send workersWait workers finish calculationsWait workers finish calculationsCollect results different workersCollect results different workersStop worker processesStop worker processesDepending platform, several communication protocols available cores. UNIX systems, Fork protocol used, available Windows PSOCK protocol used instead. Finally, distributed computing architecture cores necessarily physical processor, MPI protocol generally used. advantage future future.apply package API code can executed whatever hardware configuration.Since R 2.14.0, parallel package directly included  allows start stop cluster several worker processes (step 1 6). addition parallel package, use future package allows manage worker processes communication articulation future.apply package, turn allows manage dialogue workers (sending, receiving collecting results – steps 2, 3, 4 5).","code":""},{"path":"code-parallelization.html","id":"first-parallel-function","chapter":"6  code Parallelization","heading":"6.2 First  parallel function","text":"👉 turn !Start writing simple function computes logarithm \\(n\\) numbers:Determine many cores available computer function future::availableCores().Determine many cores available computer function future::availableCores().Using function future::plan(multisession(workers = XX)), declare “plan” parallel computations computer (taking care always leave least one core available handle processes).Using function future::plan(multisession(workers = XX)), declare “plan” parallel computations computer (taking care always leave least one core available handle processes).Using one apply functions future.apply::future_*apply(), compute log \\(n\\) numbers parallel concatenate results vector.Using one apply functions future.apply::future_*apply(), compute log \\(n\\) numbers parallel concatenate results vector.Compare execution time sequential function first 100 integers, using command :microbenchmark(log_par(1:100), log_seq(1:100), times=10)Compare execution time sequential function first 100 integers, using command :microbenchmark(log_par(1:100), log_seq(1:100), times=10)parallel version runs much slower… fact, individual tasks fast,  spend time communicating cores actual computations.loop iteration must relatively long parallel computing provide significant gain computation time!increasing \\(n\\), observe reduction difference 2 implementations (parallel computation time increases slowly compared increase sequential function).","code":"\nlibrary(microbenchmark)\nlibrary(future.apply)\n\nlog_seq <- function(x){\n  # try this yourself (spoiler alert: it is quite long...):\n  # res <- numeric(length(x))\n  # for(i in 1:length(x)){\n  #   res[i] <- log(x[i])\n  # }\n  # return(res)\n  return(log(x))\n}\n\nlog_par <- function(x){\n  res <- future_sapply(1:length(x), FUN = function(i) {\n    log(x[i])\n  })\n  return(res)\n}\n\nplan(multisession(workers = 3))\nmb <- microbenchmark(log_par(1:100), log_seq(1:100), times = 50)"},{"path":"code-parallelization.html","id":"efficient-parallelization","chapter":"6  code Parallelization","heading":"6.3 Efficient parallelization","text":"now look another use case. Let’s say large array data 10 observations 100,000 variables (e.g. genetic measurements), want compute median variables.experienced  user, operation easily implemented using apply():reality, (good) loop slower – provided nicely programmed:👉 turn !\nTry improve computation time parallelizing code 100,000 variables. gain computation time?","code":"\nx <- matrix(rnorm(1e6), nrow = 10)\ndim(x)## [1]     10 100000\ncolmedian_apply <- function(x){\n  return(apply(x, 2, median))\n}\nsystem.time(colmedian_apply(x))##    user  system elapsed \n##   1.528   0.018   1.546\ncolmedian_for <- function(x){\n  ans <- rep(0, ncol(x)) \n  for (i in 1:ncol(x)) {\n    ans[i] <- median(x[, i]) \n  }\n  return(ans)\n}\nsystem.time(colmedian_for(x))##    user  system elapsed \n##   1.488   0.014   1.503\ncolmedian_par <- function(x){\n  res <- future_sapply(1:ncol(x), FUN = function(i) {\n          median(x[, i])\n    })\n  return(res)\n}\nplan(multisession(workers = 3))\nsystem.time(colmedian_par(x))##    user  system elapsed \n##   0.131   0.018   0.892\nmb <- microbenchmark(colmedian_apply(x), \n                     colmedian_for(x),\n                     colmedian_par(x), \n                     times = 10)\nmb## Unit: milliseconds\n##                expr       min        lq      mean    median        uq       max\n##  colmedian_apply(x) 1508.3566 1521.6993 1554.9984 1539.6097 1583.9818 1635.6617\n##    colmedian_for(x) 1476.3924 1496.1198 1520.8217 1512.2960 1556.3801 1568.2275\n##    colmedian_par(x)  692.7373  711.9444  730.5878  730.7319  739.6009  781.2505\n##  neval\n##     10\n##     10\n##     10"},{"path":"code-parallelization.html","id":"other-plans-for-parallel-computations","chapter":"6  code Parallelization","heading":"6.3.1 Other “plans” for parallel computations","text":"run code (exactly code, one advantages future* family packages), need set “plan” computations:computer (single computer server) Unix (Linux, Mac OS), can use plan(multicore(workers = XX)) often efficient. multisession plan always works.computer (single computer server) Unix (Linux, Mac OS), can use plan(multicore(workers = XX)) often efficient. multisession plan always works.HPC cluster (like CURTA Bordeaux), refer package future.batchtoolson HPC cluster (like CURTA Bordeaux), refer package future.batchtools","code":""},{"path":"code-parallelization.html","id":"parallelization-in-our-common-theme-example","chapter":"6  code Parallelization","heading":"6.4 Parallelization in our common theme example","text":"👉 turn !function mvnpdfoptim() /mvnpdfsmart(), propose implementation parallelizing computations observations (columns \\(x\\))function mvnpdfoptim() /mvnpdfsmart(), propose implementation parallelizing computations observations (columns \\(x\\))Compare execuution timings 10 000 observationsCompare execuution timings 10 000 observationsYou can download proposed implementation mvnpdfoptim_par .","code":"\nplan(multisession(workers = 3))\nn <- 10000\nmb <- microbenchmark::microbenchmark(\n  mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n  mypkgr::mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n  mypkgr::mvnpdfoptim_par(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n  times=20)\nmb## Unit: microseconds\n##                                                                             expr\n##                               mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))\n##           mypkgr::mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##  mypkgr::mvnpdfoptim_par(x = matrix(1.96, nrow = 2, ncol = n),      Log = FALSE)\n##        min       lq       mean     median        uq        max neval\n##    251.125   279.21   308.5906   301.4115   324.884    433.985    20\n##  17786.702 17896.07 19837.9627 19317.2935 22080.325  22503.055    20\n##  40321.532 40676.55 54927.5155 41312.5840 43506.391 283379.700    20"},{"path":"code-parallelization.html","id":"conclusion","chapter":"6  code Parallelization","heading":"6.5 Conclusion","text":"Parallel computation saves time, first optimize code. parallelizing code, gain execution time depends ratio communication time effective computation time task.","code":""},{"path":"take-home-messages.html","id":"take-home-messages","chapter":"7 Take-home message(s)","heading":"7 Take-home message(s)","text":"MAKE PACKAGES!MAKE PACKAGES!use git, least locally yourselfuse git, least locally yourselfif needed (.e. optimization  code ), afraid using Rcpp /parallelizing codeif needed (.e. optimization  code ), afraid using Rcpp /parallelizing code","code":""},{"path":"further-reading.html","id":"further-reading","chapter":"Further reading","heading":"Further reading","text":"Hadley Wickham’s online books truly excellent contain lot supplementary informattion covered training:\nwebsite writing packages R packages.\nwebsite Advanced R everything regarding optimization, Rcpp, parallel computing.\nwebsite R Data Science also quite comprehensive includes chapters data management , also structures , modeling, well elements graphics Rmarkdown.\nHadley Wickham’s online books truly excellent contain lot supplementary informattion covered training:website writing packages R packages.website writing packages R packages.website Advanced R everything regarding optimization, Rcpp, parallel computing.website Advanced R everything regarding optimization, Rcpp, parallel computing.website R Data Science also quite comprehensive includes chapters data management , also structures , modeling, well elements graphics Rmarkdown.website R Data Science also quite comprehensive includes chapters data management , also structures , modeling, well elements graphics Rmarkdown.online book Rcpp everyone Masaki E. Tsuda also good.online book Rcpp everyone Masaki E. Tsuda also good.","code":""}]
