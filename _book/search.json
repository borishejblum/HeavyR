[{"path":"index.html","id":"course-syllabus","chapter":"Course syllabus","heading":"Course syllabus","text":"main goal course give tools ease (high-performing effcient) code development . performance side come second part, initial tools introduced also useful situations require\nimportant computation times.focus presentation development tools focuusing notion package. already familiar notion, already\nalready installed packages CRAN example ! also know standard way  distribuute code make available.\nshow package also excellent tool developing code.follow outline :Build packageBuild packageTracking changes, sharing code, collaborative development automating tests packageTracking changes, sharing code, collaborative development automating tests packageMeasure computation timeMeasure computation timeProfile codeProfile codeUse Rcpp optimize needs optimizedUse Rcpp optimize needs optimizedParallelize code easilyParallelize code easilyTo take course, need following softwares installed:latest version  (https://cloud.r-project.org/)latest version  (https://cloud.r-project.org/)latest version RStudio (https://www.rstudio.com/products/rstudio/download/#download)latest version RStudio (https://www.rstudio.com/products/rstudio/download/#download)C++ compiler (gcc clang - native UNIX systems,\nWindows users recommend installing\nRtools, \nMac users may necessary install macOS tool chain (namely Xcode Command Line Tools gfortran) used  detailed )C++ compiler (gcc clang - native UNIX systems,\nWindows users recommend installing\nRtools, \nMac users may necessary install macOS tool chain (namely Xcode Command Line Tools gfortran) used  detailed )following  packages: devtools, future.apply, itertools, microbenchmark, mvtnorm, profvis, Rcpp, RcppArmadillo, roxygen2, testthat, usethisthe following  packages: devtools, future.apply, itertools, microbenchmark, mvtnorm, profvis, Rcpp, RcppArmadillo, roxygen2, testthat, usethisthe software gitthe software git","code":""},{"path":"building-a-package.html","id":"building-a-package","chapter":"1 Building a  package","heading":"1 Building a  package","text":"present efficiently create build package using Rstudio IDE, devtools usethis packages.details provided reference material subject: book R packages Hadley Wickham, freely available online.","code":""},{"path":"building-a-package.html","id":"initializing-a-package","chapter":"1 Building a  package","heading":"1.1 Initializing a package","text":"simple way, built Rstudio, initialize package :create new project (top left File drop menu Rstudio)create new project (top left File drop menu Rstudio)choose “New Directory”choose “New Directory”choose “R package using devtools” (available, choose “R\npackage”, difference “R package” delete unnecessary files automatically created useful)choose “R package using devtools” (available, choose “R\npackage”, difference “R package” delete unnecessary files automatically created useful)give name package, example mypkgr.give name package, example mypkgr., get minimal structure  package, namely:DESCRIPTION file whose Title, Version, Authors@R \nDescription edited (parts can edited even added automatically, see\neven added automatically, see )DESCRIPTION file whose Title, Version, Authors@R \nDescription edited (parts can edited even added automatically, see\neven added automatically, see )NAMESPACE file later edited automatically\n(hands now)NAMESPACE file later edited automatically\n(hands now)folder R add .R script filesa folder R add .R script filesdevtools also adds three optional files:.gitignore, relative git, version control tool see detail\nsection GitHub.gitignore, relative git, version control tool see detail\nsection GitHubmypkgr.Rproj specific file Rstudio, allows define\ncharacteristics preferences project just createdmypkgr.Rproj specific file Rstudio, allows define\ncharacteristics preferences project just created.Rbuildignore allows ignore files build package road (example, mypkgr.Rproj file included package).Rbuildignore allows ignore files build package road (example, mypkgr.Rproj file included package)","code":""},{"path":"building-a-package.html","id":"adding-a-function-common-theme-example","chapter":"1 Building a  package","heading":"1.2 Adding a function: common theme example","text":"first invite code following function, use throughout course:want compute value density multivariate normal distribution\n\\(\\mathbb{R}^p\\) \\(n\\) points. function must applicable \nmultivariate normal distribution (.e. mean vector \n\\(\\mathbb{R}^p\\) variance-covariance matrix order \\(p\\)),\nwish compute values density evaluated\n\\(n\\) points single call function.need create function mvnpdf() file named mvnpdf.R\n folder package, :takes arguments:\nx matrix, \\(n\\) columns (observations) \\(p\\) rows\nmean vector means\nvarcovM variance-covariance matrix\nLog logical parameter, default value TRUE.\ntakes arguments:x matrix, \\(n\\) columns (observations) \\(p\\) rowsx matrix, \\(n\\) columns (observations) \\(p\\) rowsmean vector meansmean vector meansvarcovM variance-covariance matrixvarcovM variance-covariance matrixLog logical parameter, default value TRUE.Log logical parameter, default value TRUE.returns list containing matrix x, vector length \\(n\\)\nmultivariate normal distribution density values points.returns list containing matrix x, vector length \\(n\\)\nmultivariate normal distribution density values points.👉 turn !⚠️ WARNING ! click quickly link , invalidate participation class !function proposal can download\n.advice writing code, see \nR code section Hadley Wickam R packages online book.","code":""},{"path":"building-a-package.html","id":"documenting-a-function","chapter":"1 Building a  package","heading":"1.3 Documenting a function","text":"important properly document code. Every project least 2\ndevelopers:,,6 months.6 months.sake future self, favor take time document\ncode !strongly advise use roxygen2 package document\npackages. main advantage help function \nfile code defining function.👉 turn!Start inserting skeleton helper “Insert Roxygen\nSkeleton” located “Code” menu Magic Wand sub-menu \nscript window.Start inserting skeleton helper “Insert Roxygen\nSkeleton” located “Code” menu Magic Wand sub-menu \nscript window.Complete documentation filling :Complete documentation filling :title function (first line)title function (first line)description function (second paragraph)description function (second paragraph)fill third paragraph, part go “Details” section \nhelp pageif fill third paragraph, part go “Details” section \nhelp pagethe meaning parametersthe meaning parametersthe output, @return tagthe output, @return tagGenerate documentation using “Document” “” menu \nBuild” tab (Ctrl+Shift+D devtools::document()). effect \ncommand multiple:man folder created inside , mvnpdf.Rd file contains help information functiona man folder created inside , mvnpdf.Rd file contains help information functionthe NAMESPACE file modifiedthe NAMESPACE file modifiedIn case problems curiosity done, can look \nproposal.details package documentation \nroxygen2 tags, see \nObject documentation secttion Hadley Wickam R packages online book.Let’s finish mentioning function usethis package initializes \nhome help page whole package:generated help page accessible, package installed,\nfollowing command:","code":"\nusethis::use_package_doc()\n?mypkgr"},{"path":"building-a-package.html","id":"interactively-test-the-package","chapter":"1 Building a  package","heading":"1.4 Interactively test the package","text":"test package, load R using “Load ” (Ctrl+Shift+L) \n“” menu “Build” tab, alternatively devtools::load_all()).can use package directly R: see\nhelp function ?mvnpdf example execute commands given example section help page.code development, can thus:Add/Modify  codeAdd/Modify  codeRe-load package Ctrl+Shift+LRe-load package Ctrl+Shift+LExperiment consoleExperiment consoleAnd ……","code":"\n?mvndpf"},{"path":"building-a-package.html","id":"automatically-test-your-package","chapter":"1 Building a  package","heading":"1.5 Automatically test your package","text":"initialize automatic testing capabilities package, execute following command:command creates tests folder includes testthat.R file – modified – testthat folder add automated tests. tool based theory unit tests.example, content file call test-univariate.R put testthat folder:second one named test-bivariate.R :execute tests, can click “Test package” (Ctrl+Shift+T) “” menu “Build” tab, run devtools::test()advantage automatic tests run every time check package.good practice add unit test time bug identified fixed,\ncan immediately identify prevent error happening \nfuture.","code":"\nusethis::use_testthat()\ncontext(\"Univariate gaussian test\")\n\ntest_that(\"correct result for univariate gaussian\", {\n  expect_equal(mvnpdf(x=matrix(1.96), Log=FALSE)$y, dnorm(1.96))\n  expect_equal(mvnpdf(x=matrix(c(1.96, -0.5), ncol = 2), Log=FALSE)$y,\n               dnorm(c(1.96, -0.5)))\n})\ncontext(\"Bivariate gaussian test\")\n\ntest_that(\"correct results for bivariate gaussian\", {\n  expect_equal(mvnpdf(x=matrix(rep(1.96,2), nrow=2, ncol=1), Log=FALSE)$y,\n               mvtnorm::dmvnorm(rep(1.96, 2)))\n})"},{"path":"building-a-package.html","id":"checking-your-package","chapter":"1 Building a  package","heading":"1.6 Checking your package","text":"Ruunning check means ensuring tthat everything package correct work expected, can installed properly.\n“Passing R CMD CHECK” mandatory successfully uploading package CRAN.perform R CMD CHECK package, can click “Check” (Ctrl+Shift+E) “Build” tab, run devtools::check().check, automated unitt tests developed previously \nexecuted. advantage written tests, don’t need worry , simply react adjust code errors returned flagged.","code":""},{"path":"building-a-package.html","id":"install-your-package","chapter":"1 Building a  package","heading":"1.7 Install your package","text":"moment, package exists environment associated Rstudio project created. able use anywhere (computer)  general way, install (like CRAN package example)., click “Install Restart” (Ctrl+Shift+B) “Build” tab, alternatively can run devtools::install().finally, can configure Rstudio’s behavior time installation, simultaneously documents package: go “” menu “Build” tab, “Configure Build Tools”. click “Configure” check box bottom “Install Restart”.","code":""},{"path":"building-a-package.html","id":"appendix-1.1-add-an-s3-method","chapter":"1 Building a  package","heading":"1.8 Appendix 1.1: add an S3 method","text":"packages, oftten implement called S3 methods , result object res, one can run print(res), summary(res), plot(res)…example plot() method can add package:⚠️ WARNING !order S3 method want apply \nresult function mvnpdf(), declare mvnpdf() returns result class mvnpdf.Test function, executing example.Don’t forget re-install package (“Install Restart” Ctrl+Shift+B).Look contents man folder changes made NAMESPACE.proposed solution: file\ncontains complete code mvnpdf() function associated plot() method.","code":"\n#' Plot of the mvnpdf function\n#'\n#' @param x an object of class \\code{mvnpdf} resulting from a call of\n#' \\code{mnvpdf()} function.\n#' @param ... graphical parameters passed to \\code{plot()} function.\n#'\n#' @return Nothing is returned, only a plot is given.\n#' @export\n#'\n#' @examples\n#' pdfvalues <- mvnpdf(x=matrix(seq(-3, 3, by = 0.1), nrow = 1), Log=FALSE)\n#' plot(pdfvalues)\nplot.mvnpdf <- function(x, ...) {\n  plot(x$x, x$y, type = \"l\", ...)\n}"},{"path":"building-a-package.html","id":"appendix-1.2-submit-ones-package-on-cran","chapter":"1 Building a  package","heading":"1.9 Appendix 1.2: submit one’s package on CRAN","text":"Run two following commands: devtools::check() followed devtools::submit_cran().\ndetails, see Hadley Wickham’s recommanded pipeline book R packages","code":""},{"path":"version-control-with-git-and-github.html","id":"version-control-with-git-and-github","chapter":"2 Version control with git and GitHub","heading":"2 Version control with git and GitHub","text":"interested solutions offered RStudio GitHub hosting version control projects. allows monitor changes history, help collaborative development facilitate continuous integration.","code":""},{"path":"version-control-with-git-and-github.html","id":"principles-of-version-control","chapter":"2 Version control with git and GitHub","heading":"2.1 Principles of version control","text":"principle version control record successive changes made files (especially .R files case).RStudio offers 2 integrated solutions version control:gitgitsvnsvn","code":""},{"path":"version-control-with-git-and-github.html","id":"git","chapter":"2 Version control with git and GitHub","heading":"2.1.1 git","text":"git version control software (.e. tool record history successive changes code allow share changes people). git command line program, necessarily intuitive use.git works follows: server cloud, updated version code available. time possible access version code online. contributor can download last updated version (action called pull),\nediting locally. changes made locally, \ncontributor can update online version code, changes become available everyone (action called push).NB: git designed lightweight files (text files) far optimized heavy /compressed files (e.g. .RData files).","code":""},{"path":"version-control-with-git-and-github.html","id":"subversion","chapter":"2 Version control with git and GitHub","heading":"2.1.2 subversion","text":"subversion solution available RStudio. works similar way git, less functionalities won’t detail (major difference \ncontributors work simultaneously version code).","code":""},{"path":"version-control-with-git-and-github.html","id":"use-git-locally-within-rstudio","chapter":"2 Version control with git and GitHub","heading":"2.2 Use git locally within RStudio","text":"👉 turn !Start enabling git “Git/SVN” tab “Project Options” located “Tools” menu follow instructions. can also use usethis::use_git().Start enabling git “Git/SVN” tab “Project Options” located “Tools” menu follow instructions. can also use usethis::use_git().“Git” tab now appears next “Build” tab,\nregister current state package making first commit:“Git” tab now appears next “Build” tab,\nregister current state package making first commit:2a. Select files track (select .Rproj file)2a. Select files track (select .Rproj file)2b. write informative message (collaborators – includes future self)2b. write informative message (collaborators – includes future self)2c. click “Commit” >2c. click “Commit” >Add “*.Rproj” line “.gitignore” file make new commitAdd “*.Rproj” line “.gitignore” file make new commitVisualize changes history using visualization tools\n“Diff” “History” tools accessible “Git” tabVisualize changes history using visualization tools\n“Diff” “History” tools accessible “Git” tab","code":""},{"path":"version-control-with-git-and-github.html","id":"good-commit-practices","chapter":"2 Version control with git and GitHub","heading":"2.2.1 Good commit practices","text":"Ideally, commit solve one problem. fix entirety (complete), contain changes related problem (minimal). especially useful write informative commit messages (kind help collaborators, includes future self). also concise, describe reasons changes rather changes (visible Diff). NB: sometimes difficult follow guidelines letter, merely ideal guide. certainly prevent regularly making commits.hand, temptation “clean” tidy change-history natural, source unnecessary problems. contradicts traceability goal version control. Since code development generally complex, messy, non-linear intellectual process, normal recording changes reflects path. practice, future self first user change history, priority make easier future solving bugs extending functionality.","code":""},{"path":"version-control-with-git-and-github.html","id":"github","chapter":"2 Version control with git and GitHub","heading":"2.3 GitHub","text":"GitHub website offering online code hosting solution, based git. many alternative websites services (gitlab, bitbucket, …) allowing host code also based git. GitHub popular  community, relatively easy use, even novice user.Advantages using GitHub:simple user-friendly graphical interface track history changes codea simple user-friendly graphical interface track history changes codethe latest development version code available online can reference (can even reference specific commit number freeze specific version code)latest development version code available online can reference (can even reference specific commit number freeze specific version code)users clear transparent channel report bugs/difficultiesusers clear transparent channel report bugs/difficultiesit greatly facilitates collaborative developmentit greatly facilitates collaborative development","code":""},{"path":"version-control-with-git-and-github.html","id":"upload-ones-package-onto-github","chapter":"2 Version control with git and GitHub","heading":"2.3.1 Upload one’s package  onto GitHub","text":"👉 turn !Go https://github.com/ create GitHub account (hesitate, common convention use firstnamelastname username)Go https://github.com/ create GitHub account (hesitate, common convention use firstnamelastname username)Use usethis::use_github() follow instructions.Use usethis::use_github() follow instructions.Add “README.Rmd” file package order nice home page GitHub\npage GitHub:Add “README.Rmd” file package order nice home page GitHub\npage GitHub:3a. RStudio, run command usethis::use_readme_rmd()3a. RStudio, run command usethis::use_readme_rmd()3b. using “Diff” tool “Git” tab RStudio, review changes made previous command3b. using “Diff” tool “Git” tab RStudio, review changes made previous command3c. edit created “README.Rmd” file, create corresponding README.md file running knitr (click wool ball “Knit” top left RStudio), making 3rd commit containing changes3c. edit created “README.Rmd” file, create corresponding README.md file running knitr (click wool ball “Knit” top left RStudio), making 3rd commit containing changes3d. point, visit directory page GitHub, 3rd commit appear moment. synchronize online GitHub directory local folder. , click “Push” “Git” tab. Now, changes 3rd commit visible online GitHub.3d. point, visit directory page GitHub, 3rd commit appear moment. synchronize online GitHub directory local folder. , click “Push” “Git” tab. Now, changes 3rd commit visible online GitHub.","code":""},{"path":"version-control-with-git-and-github.html","id":"collaborative-code-production","chapter":"2 Version control with git and GitHub","heading":"2.4 Collaborative code production","text":"git GitHub particularly useful efficient several people collaborate develop code together. Indeed, everyone can pull push successive changes code, simultaneously, endusing always working latest version code. see different concepts useful case collaborative work.👉 turn !pairing-another participant, add new buddy “collaborator” GitHub directory “Settings” tab GitHub.pairing-another participant, add new buddy “collaborator” GitHub directory “Settings” tab GitHub.moments later, added collaborator receives email inviting accept addition (check spam folder). Click link accept.moments later, added collaborator receives email inviting accept addition (check spam folder). Click link accept.RStudio, create new project form git using url buddy’s project.RStudio, create new project form git using url buddy’s project.","code":""},{"path":"version-control-with-git-and-github.html","id":"branches","chapter":"2 Version control with git and GitHub","heading":"2.4.1 Branches","text":"One useful features git branches. allows make important changes changes code without disrupting current operation. particularly useful explore development path don’t know successful end.way, already using branches since beginning part. Indeed, default branch called “master” (sometimes “main”).Thanks system branches, obtain tree different commits time (nodes correspond separation branches).","code":""},{"path":"version-control-with-git-and-github.html","id":"merge","chapter":"2 Version control with git and GitHub","heading":"2.4.2 Merge","text":"-called “pull” can decomposed 2 actions made git:first fetch, corresponds downloading online codefirst fetch, corresponds downloading online codeimmediately followed merge, merges local version downloaded changes.immediately followed merge, merges local version downloaded changes.conducting experimental development one branch one may want merge changes “master” branch example, experiment proved successful.changes concern separate parts code, merging can done without problem. hand, two versions merged contain changes concern lines code since last common commit , encounter one () conflicts, manually resolved.","code":""},{"path":"version-control-with-git-and-github.html","id":"conflicts","chapter":"2 Version control with git and GitHub","heading":"2.4.3 Conflicts","text":"Let’s take following example: developer \\(D_1\\) developer \\(D_2\\) pulled version v0.1 code time \\(t\\) respective machines. work independently make changes code. pushing /changes, developer \\(D_2\\) receives error message:\"Sync Error.Please resolve conflicted files, commit, try syncing .\"Chaque fichier étant source de conflit alors été automatiquement édité comme suit :order solve conflict, manually carefully edit file one one, choosing whether keep local online version code, can commit , finally successfully push changes online.👉 turn !Edit README.Rmd file paired buddy, commit change, finally push .Edit README.Rmd file paired buddy, commit change, finally push .buddy modified README.Rmd modify file line (make sure discussing together), **WITHOUT* pulling buddy’s changes first! Comment try push changes.buddy modified README.Rmd modify file line (make sure discussing together), **WITHOUT* pulling buddy’s changes first! Comment try push changes.Resolve conflict.Resolve conflict.NB: real life want avoid situation always pull pushing, purposedly opposite sake providing example demystifying conflicts.","code":"<<<<<<< HEAD\nlocal code\n=======\nonline code\n>>>>>>> remote"},{"path":"version-control-with-git-and-github.html","id":"fork","chapter":"2 Version control with git and GitHub","heading":"2.4.4 Fork","text":"fork allows create copy available code repository. Thus original code impacted changes. like creating branch, severing tree, can assume ownership . also called “cutting” continue metaphor…action mainly useful pull requests (see next).","code":""},{"path":"version-control-with-git-and-github.html","id":"pull-request","chapter":"2 Version control with git and GitHub","heading":"2.4.5 Pull request","text":"Pull requests easiest way propose changes code project contributor . GitHub provides graphical interface makes easy .👉 turn !Modify README.Rmd neighbor paired-buddy forking package.Modify README.Rmd neighbor paired-buddy forking package.Propose change form pull request GitHub repository webpage (“Pull request”s tab).Propose change form pull request GitHub repository webpage (“Pull request”s tab).Accept neighbor pull request repository GitHub website, merge .Accept neighbor pull request repository GitHub website, merge .","code":""},{"path":"version-control-with-git-and-github.html","id":"issues","chapter":"2 Version control with git and GitHub","heading":"2.4.6 Issues","text":"GitHub repository, can post comment, form issue, alert developers possible bug (providing minimally reproducible example bug), question use package, ask additional feature…Ideally, propose pull request solves issue can (.e. ability time).👉 turn !Use usethis::use_github_links() add following 2 lines package DESCRIPTION file\nURL: http://github.com/*username*/mypkgBugReports: http://github.com/*username*/mypkg/issuesUse usethis::use_github_links() add following 2 lines package DESCRIPTION file\nURL: http://github.com/*username*/mypkgBugReports: http://github.com/*username*/mypkg/issuesView new changes, commit .View new changes, commit .Create output buddy’s projectCreate output buddy’s project","code":""},{"path":"version-control-with-git-and-github.html","id":"continuous-integration-ci","chapter":"2 Version control with git and GitHub","heading":"2.5 Continuous Integration (CI)","text":"change, commit, possibility introduce 1 () bugs prevent package passing CRAN R CMD CHECK. accumulate many bugs, time submitting new version CRAN many corrections make. even frustrating package passed R CMD CHECK …Continuous integration services allow check test package automatically commit ! case failure, receive email informing . number services offer (limited) free package open-source projects.Another reason use continuous integration allows test package different infrastructures (e.g. Windows, Ubuntu, Mac OS) different versions  (current, devel…)","code":""},{"path":"version-control-with-git-and-github.html","id":"github-actions","chapter":"2 Version control with git and GitHub","heading":"2.5.1 GitHub Actions","text":"GitHub Actions let launch “actions” automatically, every time push GitHub. usethis::use_github_action_check_standard() command allows initialize Github Actions add R CMD CHECK action package.👉 turn !\n1. Run command usethis::use_github_action_check_standard(), commit push changes. See happens GitHub webpage “Actions” tab.Add badge README.Rmd (nott forget knit ) code obtained 👉 console commit (push) changes.look following webpage informs different GitHub Actions available  packages: https://github.com/r-lib/actions/blob/v1/examples/README.md","code":""},{"path":"version-control-with-git-and-github.html","id":"r-hub","chapter":"2 Version control with git and GitHub","heading":"2.5.2 R-hub","text":"R consortium provides R-hub builder, ambition soon provide continuous integration service especially dedicated  packages.advantage use exact infrastructure CRAN make check package foolproof. can use devtools::check_rhub() fucntion.","code":""},{"path":"version-control-with-git-and-github.html","id":"appendix-2.1-code-coverage","chapter":"2 Version control with git and GitHub","heading":"2.6 Appendix 2.1: Code coverage","text":"covr package proposes solution measure coverage unit tests associated \npackage. test coverage determines proportion source code actually used\nexecution unit tests. Measuring coverage code reinforces reliability code gives confidence potential users.👉 turn !Run command usethis::use_coverage(), add nice badge README.md code got R consoleCommit push changes.information feel free look covr vignette.","code":""},{"path":"measuring-and-comparing-execution-times.html","id":"measuring-and-comparing-execution-times","chapter":"3 Measuring and comparing execution times","heading":"3 Measuring and comparing execution times","text":"first step optimizing code measure execution time, order compare ttimings different implementations.","code":""},{"path":"measuring-and-comparing-execution-times.html","id":"measuring-execution-times-with-system.time","chapter":"3 Measuring and comparing execution times","heading":"3.1 Measuring execution times with system.time()","text":"measure execution time R command, can use native system.time() function like :problem appears example execution fast system.time() displays 0 (close value) impossible marginally compare hopefully faster implementation. Also, see variability run command several times.Thus want compare code mvtnorm::dmvnorm() function, can’t use system.time() :say increase complexity calculation, better way: use microbenchmark package !","code":"\nsystem.time(mvnpdf(x=matrix(rep(1.96, 2), nrow=2, ncol=1), Log=FALSE))## utilisateur     système      écoulé \n##       0.001       0.000       0.003\nsystem.time(mvtnorm::dmvnorm(rep(1.96, 2)))## utilisateur     système      écoulé \n##       0.002       0.002       0.007"},{"path":"measuring-and-comparing-execution-times.html","id":"compare-execution-timings-with-microbenchmark.","chapter":"3 Measuring and comparing execution times","heading":"3.2 Compare execution timings with microbenchmark().","text":"name indicates, package allows compare execution timings even quick. Moreover, bencmarked expression repeatedly evaluated certain number times, thus stabilizing timing estimations.Botth mvnpdf() dmnvorm() functions able take matrix input, can also compare timings setting:Something happened… willfind outt issue exactly comes next.","code":"\nlibrary(microbenchmark)\nmb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),\n                     mvnpdf(x = matrix(rep(1.96,2)), \n                            Log = FALSE),\n                     times = 1000L)\nmb## Unit: microseconds\n##                                           expr    min      lq     mean median\n##                 mvtnorm::dmvnorm(rep(1.96, 2)) 31.132 34.4040 45.15137 36.346\n##  mvnpdf(x = matrix(rep(1.96, 2)), Log = FALSE) 29.277 32.1055 43.11789 34.236\n##       uq      max neval cld\n##  47.4615  255.448  1000   a\n##  43.5565 2136.091  1000   a## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please\n## use `guide = \"none\"` instead.\nn <- 100\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), \n                            Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                       expr     min       lq\n##         mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))  45.700  62.7180\n##  mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 486.363 590.4345\n##       mean   median       uq      max neval cld\n##   89.30183  74.8555  95.2575  286.301   100  a \n##  691.97587 667.9025 741.4410 1712.514   100   b## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please\n## use `guide = \"none\"` instead."},{"path":"profiling-code.html","id":"profiling-code","chapter":"4 Profiling code","heading":"4 Profiling code","text":"Profiling determining part code take time compute (also memory-wise). found block code takes longest time execute, goal optimize small part code.get profiling code , select lines code interest go “Profile” menu “Profile Selected Lines”. uses package profis, particular profvis() function.OK, OK, get ! Concatenating vector go loop really good idea.","code":"\nn <- 10e4\npdfval <- mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)"},{"path":"profiling-code.html","id":"comparison-with-an-improved-implementtation-of-mnvpdf.","chapter":"4 Profiling code","heading":"4.1 Comparison with an improved implementtation of mnvpdf().","text":"Consider new version mvnpdf(), called mvnpdfsmart(). Download file, include package.Now profile following command:indeed removed main computational bottleneck, can now learn detailed way takes time function.confirm mvnpdfsmart() indeed much faster mvnpdf() can make comparison using microbenchmark():can also check whether mvnpdfsmart becomes competitive dmvnorm():still work done…","code":"\nn <- 10e4\npdfval <- mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)\nn <- 1000\nmb <- microbenchmark(mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), \n                            Log = FALSE),\n                     mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), \n                                 Log = FALSE),\n                     times=100L)\nmb## Unit: milliseconds\n##                                                            expr      min\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4.974712\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3.670987\n##        lq     mean   median       uq      max neval cld\n##  5.293857 8.380654 6.161142 7.602295 35.56240   100   b\n##  3.889760 5.201170 4.007321 4.784496 17.15205   100  a## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please\n## use `guide = \"none\"` instead.\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   64.037\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4341.153\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3163.358\n##         lq      mean    median       uq       max neval cld\n##    90.6655  132.9889  119.6955  148.050   337.604   100 a  \n##  5164.5850 6850.1368 5759.8890 6661.545 25042.327   100   c\n##  3781.5850 4284.8126 3995.1785 4665.938 10197.571   100  b## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please\n## use `guide = \"none\"` instead."},{"path":"profiling-code.html","id":"comparison-with-an-optimized-pure-r-implementation","chapter":"4 Profiling code","heading":"4.2 Comparison with an optimized pure R implementation","text":"several research test trials errors, Boris arrived optimized version using  capabilities.Include mvnpdfoptim() function package, profile :microbenchmark() goes :Finally, can profile tthe dmvnorm() function:","code":"\nlibrary(profvis)\nn <- 10e4\nprofvis(mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE))\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   73.885\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4546.998\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3139.270\n##  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2460.157\n##        lq     mean   median       uq       max neval  cld\n##    96.020  134.194  114.822  145.382   474.306   100 a   \n##  5152.023 7409.471 5530.275 8083.681 24706.223   100    d\n##  3824.629 4332.647 3985.867 4608.326  8069.540   100   c \n##  2832.988 3412.666 2957.332 3482.244  9328.457   100  b## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please\n## use `guide = \"none\"` instead.\nn <- 10e5\nprofvis::profvis(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)))"},{"path":"rcpp-or-how-to-easily-embed-c-code-into-a-package.html","id":"rcpp-or-how-to-easily-embed-c-code-into-a-package","chapter":"5 Rcpp or how to easily embed C++ code into a  package","heading":"5 Rcpp or how to easily embed C++ code into a  package","text":"Rcpp (“R-C-Plus-Plus”) package facilitates interface C++ .  interpreted language, feature makes number things easy (including giving us access console can evaluate code variables fly). Nevertheless, ease use counterbalanced larger computation times comapred lower level languages C, Fortran C++ (require compilation).curious reader directed towards online book Rcpp everyone Masaki E. Tsuda, thorough complete resource understanding use Rcpp, complement introduction can found “Rcpp” section Hadley Wickham’s book Advanced R.","code":""},{"path":"rcpp-or-how-to-easily-embed-c-code-into-a-package.html","id":"first-function-in-rcpp","chapter":"5 Rcpp or how to easily embed C++ code into a  package","heading":"5.1 First function in Rcpp","text":"👉 turn !make package ready use Rcpp, start running following command:See changes madeSee changes madeyou also add following 2 roxygen comments general help page \npackage:also add following 2 roxygen comments general help page \npackage:now going create first function Rcpp invert matrix. , use C++ library Armadillo. modern simple linear algebra library, highly optimized, interfaced  via RcppArmadillo package.C++ different language . main differences impact us:C++ efficient loops (including nested loops – ⚠️ often one order faster , due way C++ allocates walks memory).C++ efficient loops (including nested loops – ⚠️ often one order faster , due way C++ allocates walks memory).command must end semicolon ‘;’.command must end semicolon ‘;’.C++ typed language: must declare type variable can use code.C++ typed language: must declare type variable can use code.👉 turn !Create new C++ file RStudio (via File > New File > C++ File menu), save src folder. Take time read try understand line.Create new C++ file RStudio (via File > New File > C++ File menu), save src folder. Take time read try understand line.Compile load package (via “Install Restart” button) try using timesTwo() function console.Compile load package (via “Install Restart” button) try using timesTwo() function console.Install RcppArmadillo 👉 package, don’t forget make necessary additions DESCRIPTION (use usethis::use_rcpp_armadillo())Install RcppArmadillo 👉 package, don’t forget make necessary additions DESCRIPTION (use usethis::use_rcpp_armadillo())Using Hadley Wickham’s [introduction Rcpp]](http://adv-r..co.nz/Rcpp.html#rcpp-intro) book Advanced R, well documentation RcppArmadillo package C++ library Armadillo, try write short function invC() C++ computes inverse matrix.Using Hadley Wickham’s [introduction Rcpp]](http://adv-r..co.nz/Rcpp.html#rcpp-intro) book Advanced R, well documentation RcppArmadillo package C++ library Armadillo, try write short function invC() C++ computes inverse matrix.successfully compiled invC function accessible , create mvnpdf_invC() function mvnpdfsmart implementation replacing matrix inverse calculations call invC.successfully compiled invC function accessible , create mvnpdf_invC() function mvnpdfsmart implementation replacing matrix inverse calculations call invC.Evaluate performance gain new implementation mvnpdf_invC.Evaluate performance gain new implementation mvnpdf_invC.","code":"\ndevtools::use_rcpp()\n#' @useDynLib mypkgr\n#' @importFrom Rcpp sourceCpp, .registration = TRUE\nNULL\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   70.061\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4360.663\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3285.206\n##  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2412.656\n##  mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3301.352\n##         lq      mean   median        uq       max neval  cld\n##   103.6755  122.2515  113.486  128.2495   339.326   100 a   \n##  5073.5000 6799.3807 5287.657 6224.2815 33867.602   100    d\n##  3750.4580 4450.2504 3858.553 4488.1780 10524.715   100   c \n##  2788.8530 3401.5412 2909.936 3272.4500 11832.162   100  b  \n##  3703.9090 4295.2976 3834.174 4010.0905 10585.426   100   c## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please\n## use `guide = \"none\"` instead.\nprofvis::profvis(mvnpdfoptim(x=matrix(1.96, \n    nrow = 2, ncol = 1000), Log=FALSE))\nprofvis::profvis(mvnpdfoptim(x=matrix(1.96, \n    nrow = 100, ncol = 1000), Log=FALSE))"},{"path":"rcpp-or-how-to-easily-embed-c-code-into-a-package.html","id":"optimize-thanks-to-c","chapter":"5 Rcpp or how to easily embed C++ code into a  package","heading":"5.2 Optimize thanks to C++","text":"general rule, much computational time gained replacing optimized  function C++ function. Indeed, base  fuunctions fact already wrappers around well optimized C Fortran routines. gain limited suppression argument checking type management (reason!).👉 turn !mvnpdfsmart, propose complete implementation C++ computating density multivariate Normal distribution mvnpdfC().mvnpdfsmart, propose complete implementation C++ computating density multivariate Normal distribution mvnpdfC().Evaluate performance gain new implementation mvnpdfC.Evaluate performance gain new implementation mvnpdfC.can download proposal mvnpdfC.cpp .Note Rcpp functions can used outside package architecture thanks Rcpp::sourceCpp() function. , seen always desirable manage one’s code inside package, unlikely need !","code":"\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfC(x=matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2), varcovM = diag(2), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                                                                  expr\n##                                                    mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))\n##                                             mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                        mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                        mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                        mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##  mvnpdfC(x = matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2),      varcovM = diag(2), Log = FALSE)\n##       min        lq      mean    median       uq        max neval cld\n##    68.169   92.7815  132.0139  109.1365  133.381    720.060   100 a  \n##  4455.430 5170.2455 7594.6194 5485.3355 6469.305 100891.560   100   c\n##  3308.605 3807.9300 4580.4296 3973.6660 4563.582  11084.677   100  bc\n##  2427.316 2834.0735 3304.9132 3020.1695 3328.876   8184.967   100 ab \n##  3176.958 3764.1085 6214.5535 3992.0610 4616.583 169173.391   100  bc\n##    51.657   63.8400  178.5113   71.6910   89.025   9826.808   100 a## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please\n## use `guide = \"none\"` instead."},{"path":"rcpp-or-how-to-easily-embed-c-code-into-a-package.html","id":"annexe-5.1-premature-optimization-is-a-bad-idea","chapter":"5 Rcpp or how to easily embed C++ code into a  package","heading":"5.3 Annexe 5.1: premature optimization is a bad idea","text":"Chambers, Software Data Analysis: Programming R, Springer, 2008:Including additional C code serious step, added dangers often substantial amount programming debugging required. good reason.","code":""},{"path":"parallélisation-du-code.html","id":"parallélisation-du-code","chapter":"6 Parallélisation du code ","heading":"6 Parallélisation du code ","text":"","code":""},{"path":"parallélisation-du-code.html","id":"introduction-à-lexecution-parallèle-sous","chapter":"6 Parallélisation du code ","heading":"6.1 Introduction à l’execution parallèle sous ","text":"En dehors de l’optimisation du code et des algorithmes, une autre façon\nd’obtenir un code performant est de tirer profit des architectures parallèles\ndes ordinateurs modernes. Il s’agit alors de paralléliser son code afin de\nfaire des opérations simultanées sur des parties distinctes d’un même problème,\nen utilisant différent cœurs de calcul. ne réduit pas le temps de calcul\ntotal nécessaire, mais l’ensemble des opérations s’exécute plus rapidement.Il existe un nombre non négligeable d’algorithmes qui sont d’un “parallélisme\nembarrassant”, c’est-à-dire dont les calculs peuvent se décomposer en plusieurs\nsous-calculs indépendants. En statistique, il est ainsi souvent facile et direct\nde paralléliser selon les différentes observations ou selon les différentes\ndimensions. Typiquement, il s’agit d’opérations que l’peut écrire sous la\nforme de boucle dont les opérations sont indépendantes d’une itération de la\nboucle à l’autre.Les opérations nécessaires pour l’établissement d’un code parallèle sont les suivantes :Démarrer \\(m\\) processus “travailleurs” (.e. cœurs de calcul) et les initialiserDémarrer \\(m\\) processus “travailleurs” (.e. cœurs de calcul) et les initialiserEnvoyer les fonctions et données nécessaires pour chaque tache aux travailleursEnvoyer les fonctions et données nécessaires pour chaque tache aux travailleursSéparer les taches en \\(m\\) opérations d’envergure similaire et les envoyer aux travailleursSéparer les taches en \\(m\\) opérations d’envergure similaire et les envoyer aux travailleursAttendre que tous les travailleurs aient terminer leurs calculs et obtenir leurs résultatsAttendre que tous les travailleurs aient terminer leurs calculs et obtenir leurs résultatsRassembler les résultats des différents travailleursRassembler les résultats des différents travailleursArrêter les processus travailleursArrêter les processus travailleursSelon les plateformes, plusieurs protocoles de communications sont disponibles\nentre les cœurs. Sous les systèmes UNIX, le protocole Fork est le plus\nutilisé, mais il n’est pas disponible sous Windows où utilise\npréférentiellement le protocole PSOCK. Enfin, pour les architecture de calcul\ndistribuée où les cœurs ne se trouvent pas nécessairement sur le même processeur\nphysique, utilise généralement le protocole MPI. L’avantage des packages\nfuture et future.apply est que le même code pourra être exécuté quelque soit\nla configuration matérielle.Il existe un nombre important de packages et d’initiatives permettant de faire\ndu calcul en R. Depuis R 2.14.0, le package\nparallel\nest inclus directement dans  et permet de démarrer et d’arrêter un “cluster”\nde plusieurs processus travailleur (étape 1 et 6). En plus du package\nparallel, va donc utiliser le package future qui permet de gérer les\nprocessus travailleurs et la communication et l’articulation avec le package\nfuture.applyqui permet lui de gérer le dialogue avec les travailleurs (envois,\nréception et rassemblement des résultats - étapes 2, 3, 4 et 5).","code":""},{"path":"parallélisation-du-code.html","id":"première-fonction-parallèle-en","chapter":"6 Parallélisation du code ","heading":"6.2 Première fonction parallèle en ","text":"À vous de jouer !Commencez par écrire une fonction simple qui calcule le logarithme de \\(n\\)\nnombres:Déterminez combien de coeurs sont disponibles sur votre marchine grâce à\nla fonction future::availableCores().Déterminez combien de coeurs sont disponibles sur votre marchine grâce à\nla fonction future::availableCores().À l’aide de la fonction future::plan(multisession(workers = XX)),\ndéclarez un “plan” de calculs parallèles sur votre ordinateur (en prenant garde\nà laisser un coeur disponible pour traiter les autres processus).À l’aide de la fonction future::plan(multisession(workers = XX)),\ndéclarez un “plan” de calculs parallèles sur votre ordinateur (en prenant garde\nà laisser un coeur disponible pour traiter les autres processus).À l’aide d’une fonction de type apply future.apply::future_*apply(),\ncalculez le log des \\(n\\) nombres en parallèle et concaténez les résultats dans un\nvecteur.À l’aide d’une fonction de type apply future.apply::future_*apply(),\ncalculez le log des \\(n\\) nombres en parallèle et concaténez les résultats dans un\nvecteur.Comparez le temps d’éxecution avec celui d’une fonction séquentielle\nsur les 100 premiers entiers, grâce à la commande :microbenchmark(log_par(1:100), log_seq(1:100), times=10)Comparez le temps d’éxecution avec celui d’une fonction séquentielle\nsur les 100 premiers entiers, grâce à la commande :microbenchmark(log_par(1:100), log_seq(1:100), times=10)La version parallèle tourne beaucoup plus lentement… Car en fait, si les\ntâches individuelles sont trop rapides,  va passer plus de temps à\ncommuniquer avec les cœurs, qu’à faire les calculs effectifs.Il faut qu’une itération de la boucle soit relativement longue pour que le\ncalcul parallèle apporte un gain en temps de calcul !En augmentant \\(n\\), observe une réduction de la différence entre les 2\nimplémentations (le temps de calcul en parallèle augmente très lentement comparé\nà l’augmentation de celui de la fonction séquentielle).NB : les itérateurs d’itertools sont très performants mais ne peuvent\nservir que lorsque le code à l’intérieur de future_*apply() est vectorisé (il\nest toujours possible de vectoriser le code à l’intérieur, par exemple avec une\nfonction de type apply). Ils minimisent le nombre de communication entre les\ncoeurs.","code":"\nlibrary(microbenchmark)\nlibrary(future.apply)\n\nlog_seq <- function(x){\n  # try this yourself (spoiler alert: it is quite long...):\n  # res <- numeric(length(x))\n  # for(i in 1:length(x)){\n  #   res[i] <- log(x[i])\n  # }\n  # return(res)\n  return(log(x))\n}\n\nlog_par <- function(x){\n  res <- future_sapply(1:length(x), FUN = function(i) {\n    log(x[i])\n  })\n  return(res)\n}\n\nplan(multisession(workers = 3))\nmb <- microbenchmark(log_par(1:100), log_seq(1:100), times = 50)"},{"path":"parallélisation-du-code.html","id":"parallélisation-efficace","chapter":"6 Parallélisation du code ","heading":"6.3 Parallélisation efficace","text":"va maintenant se pencher sur un autre cas d’utilisation. Imaginons que l’\nait un grand tableau de données de taille comportant 10 observations pour 100\n000 variables (e.g. des mesures de génomique), et que l’veuille calculer la\nmédiane pour chacune de ces variables.Pour un utilisateur averti de , une telle opération se programme facilement\nà l’aide de la fonction apply :En réalité, une boucle n’est pas plus lente à condition d’être bien\nprogrammée :À vous de jouer !\nEssayez d’améliorer encore ce temps de calcul en parallélisant :Parallélisez le calcul de la médiane de chacune des 100 000 variables.\nObserve-t-un gain en temps de calcul ?Parallélisez le calcul de la médiane de chacune des 100 000 variables.\nObserve-t-un gain en temps de calcul ?Proposez une implémentation alternative grâce à la fonction\nitertools::isplitIndices() qui permet de séparer vos données (les \\(n\\) nombres)\nen autant de groupes que vous avez de coeurs. Comparez à nouveau les temps de\ncalcul.Proposez une implémentation alternative grâce à la fonction\nitertools::isplitIndices() qui permet de séparer vos données (les \\(n\\) nombres)\nen autant de groupes que vous avez de coeurs. Comparez à nouveau les temps de\ncalcul.","code":"\nx <- matrix(rnorm(1e6), nrow = 10)\ndim(x)## [1]     10 100000\ncolmedian_apply <- function(x){\n  return(apply(x, 2, median))\n}\nsystem.time(colmedian_apply(x))## utilisateur     système      écoulé \n##       3.042       0.030       3.092\ncolmedian_for <- function(x){\n  ans <- rep(0, ncol(x)) \n  for (i in 1:ncol(x)) {\n    ans[i] <- median(x[, i]) \n  }\n  return(ans)\n}\nsystem.time(colmedian_for(x))## utilisateur     système      écoulé \n##       2.917       0.011       2.941\ncolmedian_par <- function(x){\n  res <- future_sapply(1:ncol(x), FUN = function(i) {\n          median(x[, i])\n    })\n  return(res)\n}\nplan(multisession(workers = 3))\nsystem.time(colmedian_par(x))## utilisateur     système      écoulé \n##       0.101       0.019       1.439\ncolmedian_parIter <- function(x, ncores = 1){\n  iter <- itertools::isplitIndices(n = ncol(x), chunks = ncores)\n  res <- future_sapply(iter, FUN = function(i) {\n          apply(x[, i], 2, median)\n    })\n  return(unlist(res))\n}\nsystem.time(colmedian_parIter(x, ncores = 3))## utilisateur     système      écoulé \n##       0.082       0.017       1.245\nmb <- microbenchmark(colmedian_apply(x), \n                     colmedian_for(x),\n                     colmedian_par(x),\n                     colmedian_parIter(x, ncores = 3), times = 10)\nmb## Unit: milliseconds\n##                              expr       min       lq     mean   median       uq\n##                colmedian_apply(x) 2508.9098 2629.735 2689.872 2691.283 2783.711\n##                  colmedian_for(x) 2549.3103 2574.686 2758.920 2674.481 2740.282\n##                  colmedian_par(x) 1092.2788 1123.261 1154.978 1133.733 1143.486\n##  colmedian_parIter(x, ncores = 3)  993.0038 1045.915 1129.355 1081.597 1111.276\n##       max neval cld\n##  2796.538    10   b\n##  3612.499    10   b\n##  1362.110    10  a \n##  1636.029    10  a"},{"path":"parallélisation-du-code.html","id":"les-itérateurs","chapter":"6 Parallélisation du code ","heading":"6.3.1 Les itérateurs","text":"Le package itertools permet de séparer facilement des données ou des\ntaches (étape 3) tout en minimisant les communications avec les différents\ntravailleurs. Il s’appuie sur une implémentation des itérateurs en .\nSon utilisation nécessite néanmoins de vectoriser le code à l’intérieur de\nfuture_*apply(). Expérimentez avec le petit code ci-dessous :","code":"\nmyiter <- itertools::isplitIndices(n = 30, chunks = 3)\n\n# Une première fois\niterators::nextElem(myiter)##  [1]  1  2  3  4  5  6  7  8  9 10\n# Une deuxième fois... Oh ?!\niterators::nextElem(myiter)##  [1] 11 12 13 14 15 16 17 18 19 20\n# Encore !\niterators::nextElem(myiter)##  [1] 21 22 23 24 25 26 27 28 29 30\n# Encore ?\niterators::nextElem(myiter)## Error: StopIteration"},{"path":"parallélisation-du-code.html","id":"les-autres-plans-de-calculs-parallèle","chapter":"6 Parallélisation du code ","heading":"6.3.2 Les autres “plans” de calculs parallèle","text":"Pour exécuter votre code (exactement le même code, c’est un des avantages\ndu packages de la famille future*), vous devez régler un “plan” de calculs :sur un ordinateur (ou un unique serveur de calcul) sous Unix (Linux, Mac OS),\nvous pouvez utiliser plan(multicore(workers = XX)) qui est souvent plus\nperformant. Le plan multisession fonctionne toujours.sur un ordinateur (ou un unique serveur de calcul) sous Unix (Linux, Mac OS),\nvous pouvez utiliser plan(multicore(workers = XX)) qui est souvent plus\nperformant. Le plan multisession fonctionne toujours.sur un cluster de calculs (type Avakas à Bordeaux), nous renvoyons au package\nfuture.batchtoolssur un cluster de calculs (type Avakas à Bordeaux), nous renvoyons au package\nfuture.batchtools","code":""},{"path":"parallélisation-du-code.html","id":"parallélisation-dans-notre-exemple-fil-rouge","chapter":"6 Parallélisation du code ","heading":"6.4 Parallélisation dans notre exemple fil rouge","text":"À vous de jouer !À partir de la fonction mvnpdfoptim() et/ou mvnpdfsmart(), proposez\nune implémentation parallélisant les calculs sur les observations (colonnes de \\(x\\))À partir de la fonction mvnpdfoptim() et/ou mvnpdfsmart(), proposez\nune implémentation parallélisant les calculs sur les observations (colonnes de \\(x\\))Comparez les temps de calcul sur 10 000 observationsComparez les temps de calcul sur 10 000 observations","code":"\nplan(multisession(workers = 3))\nn <- 10000\nmb <- microbenchmark::microbenchmark(\n  mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n  mypkgr::mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n  mypkgr::mvnpdfoptim_par(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n  mypkgr::mvnpdfoptim_parIter(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE, ncores = 3),\n  times=20L)\nmb## Unit: microseconds\n##                                                                                             expr\n##                                               mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))\n##                           mypkgr::mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                  mypkgr::mvnpdfoptim_par(x = matrix(1.96, nrow = 2, ncol = n),      Log = FALSE)\n##  mypkgr::mvnpdfoptim_parIter(x = matrix(1.96, nrow = 2, ncol = n),      Log = FALSE, ncores = 3)\n##        min         lq       mean     median         uq       max neval cld\n##    300.519   344.0155   362.6347   352.9305   392.7385    447.60    20  a \n##  24144.586 27844.8270 29340.4425 28354.5550 29700.8440  37591.64    20  ab\n##  21117.246 24406.5590 25520.3099 25217.5930 26919.3365  28695.41    20  ab\n##  20026.677 22529.1105 40802.1316 25208.0950 26377.1595 349567.61    20   b"},{"path":"parallélisation-du-code.html","id":"conclusion","chapter":"6 Parallélisation du code ","heading":"6.5 Conclusion","text":"La parallélisation permet de gagner du temps, mais il faut d’abord bien\noptimiser son code. Quand parallélise un code, le gain sur la durée\nd’exécution dépend avant tout du ratio entre le temps de communication et le\ntemps de calcul effectif pour chaque tache.","code":""},{"path":"take-home-messages.html","id":"take-home-messages","chapter":"7 Take-home message(s)","heading":"7 Take-home message(s)","text":"MAKE PACKAGESMAKE PACKAGESuse git, least locally yourselfuse git, least locally yourselfif needed (.e. optimization  code ), afraid using Rcpp /parallelizing tour codeif needed (.e. optimization  code ), afraid using Rcpp /parallelizing tour code","code":""},{"path":"further-reading.html","id":"further-reading","chapter":"Further reading","heading":"Further reading","text":"Hadley Wickham’s online books truly excellent contain lot supplementary informattion covered training:\nwebsite writing packages R packages.\nwebsite Advanced R everything regarding optimization, Rcpp, parallel computing.\nwebsite R Data Science also quite comprehensive includes chapters data management , also structures , modeling, well elements graphics Rmarkdown.\nHadley Wickham’s online books truly excellent contain lot supplementary informattion covered training:website writing packages R packages.website writing packages R packages.website Advanced R everything regarding optimization, Rcpp, parallel computing.website Advanced R everything regarding optimization, Rcpp, parallel computing.website R Data Science also quite comprehensive includes chapters data management , also structures , modeling, well elements graphics Rmarkdown.website R Data Science also quite comprehensive includes chapters data management , also structures , modeling, well elements graphics Rmarkdown.online book Rcpp everyone Masaki E. Tsuda also good.online book Rcpp everyone Masaki E. Tsuda also good.","code":""}]
